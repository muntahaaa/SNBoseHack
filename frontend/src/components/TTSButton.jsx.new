import React, { useState, useRef, useEffect } from "react";
import { fetchTTS } from "../utils/ttsApi";

// Voice options for different languages
const VOICE_OPTIONS = {
  "en-US": "en-US-AriaNeural",
  "bn-IN": "bn-IN-TanishaaNeural",  // Bengali voice
};

export default function TTSButton({ 
  text, 
  language = "en-US", 
  voice, 
  showControls = true, 
  buttonStyle = {}, 
  showLanguageSelector = false,
  ...props 
}) {
  // Auto-select voice based on language if not specified
  const [selectedLanguage, setSelectedLanguage] = useState(language);
  const [selectedVoice, setSelectedVoice] = useState(
    voice || VOICE_OPTIONS[language] || VOICE_OPTIONS["en-US"]
  );
  
  const [audioState, setAudioState] = useState({
    isLoading: false,
    isPlaying: false,
    isPaused: false,
    audioUrl: null,
    error: null
  });
  
  const audioRef = useRef(null);
  const playPromiseRef = useRef(null);  // Track the play promise
  
  // Clean up on unmount
  useEffect(() => {
    return () => {
      if (audioRef.current) {
        audioRef.current.pause();
        
        // Clean up event listeners if they exist
        if (audioRef.current.handleEnded) {
          audioRef.current.removeEventListener('ended', audioRef.current.handleEnded);
        }
        if (audioRef.current.handlePause) {
          audioRef.current.removeEventListener('pause', audioRef.current.handlePause);
        }
        if (audioRef.current.handlePlay) {
          audioRef.current.removeEventListener('play', audioRef.current.handlePlay);
        }
        
        audioRef.current = null;
      }
      if (audioState.audioUrl) {
        URL.revokeObjectURL(audioState.audioUrl);
      }
    };
  }, [audioState.audioUrl]);

  // Handle language change
  const handleLanguageChange = (e) => {
    const newLanguage = e.target.value;
    setSelectedLanguage(newLanguage);
    // Auto-select the appropriate voice for the language
    setSelectedVoice(VOICE_OPTIONS[newLanguage] || VOICE_OPTIONS["en-US"]);
    
    // Reset audio if it was already playing
    if (audioState.audioUrl) {
      resetAudio();
    }
  };

  const handleSpeak = async () => {
    // If audio is already loaded
    if (audioState.audioUrl) {
      togglePlayPause();
      return;
    }
    
    setAudioState(prev => ({ ...prev, isLoading: true, error: null }));
    
    try {
      const audioBlob = await fetchTTS({ 
        text, 
        language: selectedLanguage, 
        voice: selectedVoice
      });
      const url = URL.createObjectURL(audioBlob);
      
      const audio = new Audio(url);
      
      // Define event handlers with proper function references
      const handleEnded = () => {
        console.log('Audio ended event');
        setAudioState(prev => ({ 
          ...prev, 
          isPlaying: false,
          isPaused: false
        }));
      };
      
      const handlePause = () => {
        console.log('Audio pause event');
        setAudioState(prev => ({ ...prev, isPlaying: false, isPaused: true }));
      };
      
      const handlePlay = () => {
        console.log('Audio play event');
        setAudioState(prev => ({ ...prev, isPlaying: true, isPaused: false }));
      };
      
      // Set up event listeners
      audio.addEventListener('ended', handleEnded);
      audio.addEventListener('pause', handlePause);
      audio.addEventListener('play', handlePlay);
      
      // Store handlers for cleanup
      audio.handleEnded = handleEnded;
      audio.handlePause = handlePause;
      audio.handlePlay = handlePlay;
      
      audioRef.current = audio;
      
      // Play audio with promise handling
      playPromiseRef.current = audio.play();
      
      if (playPromiseRef.current !== undefined) {
        playPromiseRef.current
          .then(() => {
            console.log('Audio playback started successfully');
            playPromiseRef.current = null;
            
            // Update state with the URL
            setAudioState(prev => ({ 
              ...prev, 
              isLoading: false, 
              isPlaying: true,
              audioUrl: url 
            }));
          })
          .catch(error => {
            console.error('Play promise rejected:', error);
            playPromiseRef.current = null;
            setAudioState(prev => ({ 
              ...prev, 
              isLoading: false,
              error: `Play error: ${error.message}`
            }));
          });
      }
    } catch (e) {
      console.error("TTS Error:", e);
      setAudioState(prev => ({ 
        ...prev, 
        isLoading: false, 
        error: "Failed to speak text" 
      }));
    }
  };
  
  const togglePlayPause = () => {
    console.log('Toggle play/pause called', audioState);
    if (!audioRef.current) {
      console.error('No audio reference available');
      return;
    }
    
    try {
      if (audioState.isPlaying) {
        console.log('Pausing audio...');
        // Only pause if we're not in the middle of a play operation
        if (playPromiseRef.current) {
          console.log('Play promise pending, waiting before pausing');
          playPromiseRef.current
            .then(() => {
              audioRef.current?.pause();
              playPromiseRef.current = null;
              console.log('Audio paused after play promise resolved');
            })
            .catch(err => {
              console.error('Error in pending play promise:', err);
              playPromiseRef.current = null;
            });
        } else {
          audioRef.current.pause();
          console.log('Audio pause command issued directly');
        }
        // Let the event listener handle state update for consistent behavior
      } else {
        console.log('Playing audio...');
        // Make sure we're not interrupting an existing operation
        if (playPromiseRef.current !== null) {
          console.log('Another play/pause operation is in progress, waiting...');
          return;
        }

        // Add a small delay before playing to ensure the audio is ready
        setTimeout(() => {
          if (audioRef.current && !audioState.isPlaying) {
            // Use the Promise API for better error handling
            playPromiseRef.current = audioRef.current.play();
            if (playPromiseRef.current !== undefined) {
              playPromiseRef.current
                .then(() => {
                  console.log('Audio play promise resolved successfully');
                  playPromiseRef.current = null;
                  // Let the event listener update the state
                })
                .catch(err => {
                  if (err.name === 'AbortError') {
                    console.log('Play was aborted by pause, this is normal');
                  } else {
                    console.error('Error playing audio:', err);
                    setAudioState(prev => ({ 
                      ...prev, 
                      isPlaying: false, 
                      isPaused: false,
                      error: `Play error: ${err.message}` 
                    }));
                  }
                  playPromiseRef.current = null;
                });
            }
          }
        }, 100); // Short delay to help browser prepare
      }
    } catch (error) {
      console.error('Error toggling play/pause:', error);
    }
  };
  
  const resetAudio = () => {
    // Handle in-progress play operations
    if (playPromiseRef.current) {
      // We have a pending play operation
      console.log('Cleanup with pending play operation');
      
      // Don't try to pause until the play promise resolves
      // This prevents the AbortError
      playPromiseRef.current
        .then(() => {
          if (audioRef.current) {
            audioRef.current.pause();
            cleanupResources();
          }
          playPromiseRef.current = null;
        })
        .catch(() => {
          playPromiseRef.current = null;
          cleanupResources();
        });
    } else if (audioRef.current) {
      audioRef.current.pause();
      audioRef.current.currentTime = 0;
      cleanupResources();
    }
    
    function cleanupResources() {
      // Clean up event listeners properly
      if (audioRef.current) {
        if (audioRef.current.handleEnded) {
          audioRef.current.removeEventListener('ended', audioRef.current.handleEnded);
        }
        if (audioRef.current.handlePause) {
          audioRef.current.removeEventListener('pause', audioRef.current.handlePause);
        }
        if (audioRef.current.handlePlay) {
          audioRef.current.removeEventListener('play', audioRef.current.handlePlay);
        }
        
        audioRef.current = null;
      }
      
      // Free memory
      if (audioState.audioUrl) {
        URL.revokeObjectURL(audioState.audioUrl);
      }
      
      // Reset state
      setAudioState({
        isLoading: false,
        isPlaying: false, 
        isPaused: false,
        audioUrl: null,
        error: null
      });
    }
  };

  // If simple mode (no controls)
  if (!showControls) {
    return (
      <div>
        {showLanguageSelector && (
          <div style={{ marginBottom: "10px" }}>
            <label style={{ marginRight: "8px" }}>Language:</label>
            <select 
              value={selectedLanguage} 
              onChange={handleLanguageChange}
              style={{
                padding: "4px 8px",
                borderRadius: "8px",
                border: "1px solid #ccc"
              }}
            >
              <option value="en-US">English</option>
              <option value="bn-IN">Bengali</option>
            </select>
          </div>
        )}
        <button 
          onClick={handleSpeak} 
          disabled={audioState.isLoading} 
          style={{ backgroundColor: audioState.isPlaying ? "#3b8eef" : "#4da3ff", ...buttonStyle }}
          {...props}
        >
          {audioState.isLoading ? "Speaking..." : audioState.isPlaying ? "🔊 Playing..." : "🔊 Speak"}
        </button>
      </div>
    );
  }

  // With audio controls
  return (
    <div className="tts-button-container" style={{ display: "flex", flexDirection: showLanguageSelector ? "column" : "row", gap: "8px", ...props.containerStyle }}>
      {showLanguageSelector && (
        <div style={{ marginBottom: "10px" }}>
          <label style={{ marginRight: "8px" }}>Language:</label>
          <select 
            value={selectedLanguage} 
            onChange={handleLanguageChange}
            style={{
              padding: "4px 8px",
              borderRadius: "8px",
              border: "1px solid #ccc"
            }}
          >
            <option value="en-US">English</option>
            <option value="bn-IN">Bengali</option>
          </select>
        </div>
      )}
      
      <div style={{ display: "flex", gap: "8px" }}>
        {!audioState.audioUrl ? (
          <button 
            onClick={handleSpeak} 
            disabled={audioState.isLoading} 
            style={{ 
              backgroundColor: "#4da3ff", 
              color: "white",
              border: "none",
              borderRadius: "16px",
              padding: "6px 12px",
              cursor: audioState.isLoading ? "wait" : "pointer",
              ...buttonStyle
            }}
            {...props}
          >
            {audioState.isLoading ? "Loading..." : "🔊 Speak"}
          </button>
        ) : (
          <>
            <button 
              onClick={togglePlayPause} 
              style={{ 
                backgroundColor: "#4da3ff", 
                color: "white",
                border: "none",
                borderRadius: "16px",
                padding: "6px 12px",
                cursor: "pointer",
                ...buttonStyle 
              }}
            >
              {audioState.isPlaying ? "⏸️ Pause" : "▶️ Play"}
            </button>
            <button 
              onClick={resetAudio} 
              style={{ 
                backgroundColor: "#f0f0f0", 
                color: "#666",
                border: "none",
                borderRadius: "16px",
                padding: "6px 12px",
                cursor: "pointer",
                ...props.resetStyle 
              }}
            >
              🔄 Reset
            </button>
          </>
        )}
      </div>
      {audioState.error && <div style={{ color: "red" }}>{audioState.error}</div>}
    </div>
  );
}
